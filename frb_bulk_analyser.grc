options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: frb_bulk_analyser
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: FRB Bulk ANalyser
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: srate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 324.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: fftsize
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 320.0]
    rotation: 0
    state: true
- name: blocks_delay_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*0)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 12.0]
    rotation: 0
    state: true
- name: blocks_delay_0_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*1)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 84.0]
    rotation: 0
    state: true
- name: blocks_delay_0_0_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*9)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 652.0]
    rotation: 0
    state: true
- name: blocks_delay_0_1
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*2)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 156.0]
    rotation: 0
    state: true
- name: blocks_delay_0_1_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*10)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 732.0]
    rotation: 0
    state: true
- name: blocks_delay_0_2
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*3)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 228.0]
    rotation: 0
    state: true
- name: blocks_delay_0_2_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*11)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 796.0]
    rotation: 0
    state: true
- name: blocks_delay_0_3
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*4)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 300.0]
    rotation: 0
    state: true
- name: blocks_delay_0_3_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*5)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 372.0]
    rotation: 0
    state: true
- name: blocks_delay_0_3_0_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*13)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 940.0]
    rotation: 0
    state: true
- name: blocks_delay_0_3_1
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*12)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 876.0]
    rotation: 0
    state: true
- name: blocks_delay_0_4
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*6)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 444.0]
    rotation: 0
    state: true
- name: blocks_delay_0_4_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*14)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 1020.0]
    rotation: 0
    state: true
- name: blocks_delay_0_5
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*7)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 516.0]
    rotation: 0
    state: true
- name: blocks_delay_0_5_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*15)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 1084.0]
    rotation: 0
    state: true
- name: blocks_delay_0_6
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(sdelay*8)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 588.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: prefix+"frb_dedisp.dat"
    type: float
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1656, 676.0]
    rotation: 0
    state: true
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: infile
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'False'
    type: float
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 148.0]
    rotation: 0
    state: true
- name: blocks_vector_to_streams_0
  id: blocks_vector_to_streams
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: fftsize
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 224.0]
    rotation: 0
    state: true
- name: declination
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Declination
    short_id: ''
    type: eng_float
    value: '-99.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 1196.0]
    rotation: 0
    state: true
- name: fftsize
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: FFT size
    short_id: ''
    type: intx
    value: '16'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 1092.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import os
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 28.0]
    rotation: 0
    state: true
- name: infile
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Input File
    short_id: ''
    type: str
    value: '"/dev/null"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 1084.0]
    rotation: 0
    state: true
- name: longitude
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Local longitude
    short_id: ''
    type: eng_float
    value: '-76.108'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 1196.0]
    rotation: 0
    state: true
- name: prefix
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: File prefix
    short_id: ''
    type: str
    value: '"./"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 1196.0]
    rotation: 0
    state: true
- name: pulse_finder_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nimport ephem\nimport json\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"FRB Pulse finder - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ threshold=4.0, srate=6250, tstamp=time.time(), seconds=10*60, longitude=-76.108,\
      \ declination=-99.0, prefix=\"./\", sdelay=0.0):  # only default arguments here\n\
      \        \"\"\"Args:\n             threshold - detection threshold as a ratio\n\
      \             srate - original effective sample rate going into detetor\n  \
      \           tstamp - timestamp of input file\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='FRB Pulse Finder',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=None\n        )\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n        self.threshold\
      \ = threshold\n        self.srate = srate\n        self.tstamp = tstamp\n  \
      \      self.scount = 0\n        self.seconds = seconds\n        self.holdoff\
      \ = self.srate * 30\n        self.longitude = longitude\n        self.declination\
      \ = declination\n        self.prefix = prefix\n        self.workcount = 0\n\
      \        self.set_output_multiple(int(self.srate))\n        self.sdelay = sdelay\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"Look for samples\
      \ with larger SNR\"\"\"\n        l = len(input_items[0])\n\n        offset =\
      \ 0\n        \n        \n        #\n        # Deal with hold-off\n        #\n\
      \        # We have a hold-off just to avoid declaring an event during\n    \
      \    #  the first little bit of the filterbank file, which would include\n \
      \       #  start-up transients from the hardware\n        #\n        \n    \
      \    #\n        # Stil have some hold-off remaining?\n        #\n        if\
      \ (self.holdoff > 0):\n            \n            #\n            # More hold-off\
      \ than input buffer?\n            #\n            if (self.holdoff >= l):\n \
      \               self.holdoff -= l\n                self.scount += l\n      \
      \          return l\n            \n            #\n            # Input buffer\
      \ longer than hold-off\n            #   zero hold-off, and compute offset\n\
      \            #\n            else:\n                offset = self.holdoff\n \
      \               self.holdoff = 0\n        \n        #\n        # Get largest\
      \ item in input buffer\n        #\n        # Compute mean and standard deviation\n\
      \        #\n        mx = np.max(input_items[0][offset:])\n        std = np.std(input_items[0][offset:])\n\
      \        mean = np.mean(input_items[0][offset:])\n\n        \n        #\n  \
      \      # Is it larger than threshold but smaller than horrendous?\n        #\n\
      \        #\n        sigma = (mx-mean)/std\n        if (sigma > self.threshold\
      \ and sigma < 50.0):\n            \n            #\n            # Determine what\
      \ the notional start-time of the\n            #  input filterbank file is.\n\
      \            #\n            start = self.tstamp - self.seconds\n           \
      \ \n            #\n            # Determine offset of max from start of input\
      \ buffer\n            #\n            mxa = np.argmax(input_items[0][offset:])\n\
      \            mxa += offset\n            \n            #\n            # Event\
      \ time is start + the current sample-count/rate,\n            #   plus the buffer\
      \ offset where the event occcured.\n            #\n            evt = start +\
      \ float(self.scount)/float(self.srate)\n            evt += float(mxa) / float(self.srate)\n\
      \            \n            #\n            # Open an \"event\" json file\n  \
      \          #\n            fp = open (self.prefix+\"frb-event.json\", \"w\")\n\
      \            \n            #\n            # Create a dictionary that will get\
      \ written out as JSON\n            #\n            evdict = {}\n            evdict[\"\
      declination\"] = self.declination\n            ltp = time.gmtime(evt)\n    \
      \        frac = evt - float(int(evt))\n            sidt = self.cur_sidereal(self.longitude)\n\
      \            evdict[\"date\"] = \"%04d%02d%02d\" % (ltp.tm_year, ltp.tm_mon,\
      \ ltp.tm_mday)\n            evdict[\"evtime\"] = \"%02d%02d%05.2f\" % (ltp.tm_hour,\
      \ ltp.tm_min,\n                float(ltp.tm_sec)+frac)\n            evdict[\"\
      max\"] = float(mx)\n            evdict[\"sigma\"] = float(sigma)\n         \
      \   evdict[\"lmst\"] = self.cur_sidereal(self.longitude)\n            evdict[\"\
      srate\"] = int(self.srate)\n            evdict[\"scount\"] = int(self.scount+mxa)\n\
      \            evdict[\"sdelay\"] = self.sdelay\n            evdict[\"maxdelay\"\
      ] = self.sdelay * 16.0 * (1.0/ self.srate)\n            fp.write(json.dumps(evdict,indent=4))\n\
      \            fp.close()\n        self.scount += l\n        return l\n    \n\
      \    # Given longitude(decimal degrees as a float)\n    #\n    # Return the\
      \ current sidereal time as a string with\n    #  \",\" separated tokens\n  \
      \  #\n    def cur_sidereal(self,longitude):\n        longstr = \"%02d\" % int(longitude)\n\
      \        longstr = longstr + \":\"\n        longitude = abs(longitude)\n   \
      \     frac = longitude - int(longitude)\n        frac *= 60\n        mins =\
      \ int(frac)\n        longstr += \"%02d\" % mins\n        longstr += \":00\"\n\
      \        x = ephem.Observer()\n        x.date = ephem.now()\n        x.long\
      \ = longstr\n        jdate = ephem.julian_date(x)\n        tokens=str(x.sidereal_time()).split(\"\
      :\")\n        hours=int(tokens[0])\n        minutes=int(tokens[1])\n       \
      \ seconds=int(float(tokens[2]))\n        sidt = \"%02d,%02d,%02d\" % (hours,\
      \ minutes, seconds)\n        return (sidt)\n\n        \n"
    affinity: ''
    alias: ''
    comment: ''
    declination: declination
    longitude: longitude
    maxoutbuf: '0'
    minoutbuf: '0'
    prefix: prefix
    sdelay: sdelay
    seconds: seconds
    srate: samp_rate
    threshold: threshold
    tstamp: os.stat(infile).st_mtime
  states:
    _io_cache: ('FRB Pulse Finder', 'blk', [('threshold', '4.0'), ('srate', '6250'),
      ('tstamp', '1644689644.5139067'), ('seconds', '600'), ('longitude', '-76.108'),
      ('declination', '-99.0'), ('prefix', "'./'"), ('sdelay', '0.0')], [('0', 'float',
      1)], [], 'FRB Pulse finder - a simple multiply const', ['declination', 'longitude',
      'prefix', 'sdelay', 'seconds', 'srate', 'threshold', 'tstamp'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1696, 500.0]
    rotation: 0
    state: true
- name: sdelay
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Dispersion delay increment
    short_id: ''
    type: eng_float
    value: '0.75'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 980.0]
    rotation: 0
    state: true
- name: seconds
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: How many seconds of data in input
    short_id: ''
    type: intx
    value: 10*60
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [120, 1196.0]
    rotation: 0
    state: true
- name: srate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Data sample rate
    short_id: ''
    type: intx
    value: '6250'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 868.0]
    rotation: 0
    state: true
- name: threshold
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Detection threshold
    short_id: ''
    type: eng_float
    value: '5.5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 1196.0]
    rotation: 0
    state: true

connections:
- [blocks_add_xx_0, '0', blocks_file_sink_0, '0']
- [blocks_add_xx_0, '0', pulse_finder_1, '0']
- [blocks_delay_0, '0', blocks_add_xx_0, '0']
- [blocks_delay_0_0, '0', blocks_add_xx_0, '1']
- [blocks_delay_0_0_0, '0', blocks_add_xx_0, '9']
- [blocks_delay_0_1, '0', blocks_add_xx_0, '2']
- [blocks_delay_0_1_0, '0', blocks_add_xx_0, '10']
- [blocks_delay_0_2, '0', blocks_add_xx_0, '3']
- [blocks_delay_0_2_0, '0', blocks_add_xx_0, '11']
- [blocks_delay_0_3, '0', blocks_add_xx_0, '4']
- [blocks_delay_0_3_0, '0', blocks_add_xx_0, '5']
- [blocks_delay_0_3_0_0, '0', blocks_add_xx_0, '13']
- [blocks_delay_0_3_1, '0', blocks_add_xx_0, '12']
- [blocks_delay_0_4, '0', blocks_add_xx_0, '6']
- [blocks_delay_0_4_0, '0', blocks_add_xx_0, '14']
- [blocks_delay_0_5, '0', blocks_add_xx_0, '7']
- [blocks_delay_0_5_0, '0', blocks_add_xx_0, '15']
- [blocks_delay_0_6, '0', blocks_add_xx_0, '8']
- [blocks_file_source_0, '0', blocks_vector_to_streams_0, '0']
- [blocks_vector_to_streams_0, '0', blocks_delay_0, '0']
- [blocks_vector_to_streams_0, '1', blocks_delay_0_0, '0']
- [blocks_vector_to_streams_0, '10', blocks_delay_0_1_0, '0']
- [blocks_vector_to_streams_0, '11', blocks_delay_0_2_0, '0']
- [blocks_vector_to_streams_0, '12', blocks_delay_0_3_1, '0']
- [blocks_vector_to_streams_0, '13', blocks_delay_0_3_0_0, '0']
- [blocks_vector_to_streams_0, '14', blocks_delay_0_4_0, '0']
- [blocks_vector_to_streams_0, '15', blocks_delay_0_5_0, '0']
- [blocks_vector_to_streams_0, '2', blocks_delay_0_1, '0']
- [blocks_vector_to_streams_0, '3', blocks_delay_0_2, '0']
- [blocks_vector_to_streams_0, '4', blocks_delay_0_3, '0']
- [blocks_vector_to_streams_0, '5', blocks_delay_0_3_0, '0']
- [blocks_vector_to_streams_0, '6', blocks_delay_0_4, '0']
- [blocks_vector_to_streams_0, '7', blocks_delay_0_5, '0']
- [blocks_vector_to_streams_0, '8', blocks_delay_0_6, '0']
- [blocks_vector_to_streams_0, '9', blocks_delay_0_0_0, '0']

metadata:
  file_format: 1
