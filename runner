#!/bin/bash
cat >helptmp$$ <<"!EOF!"
Usage: runner --device <dev> --longitude <long> --decln <dec> --antenna <ant>
    [--srate <rate>] [--frequency <freq>] [--save <savedir>] [--chan <chname>]
    [--temp <tmpdir>] [--threshold <thresh>]
!EOF!
SRATE=10e6
RFGAIN=30
TMPDIR=$HOME
CHAN=FRB0
FREQ=1420.4058e6
SAVEDIR=$HOME/ra_data
DEVICE=None
DECLN=None
LONG=None
THRESH=8.5
ANT=None
if [ $# -le 0 ]
then
	cat helptmp$$
	rm -f helptmp$$
	exit 0
fi
while [ $# -gt 0 ]
do
	case $1 in
		--device|--dev)
			DEVICE="$2"
			shift 2
			;;
		--srate)
			SRATE=$2
			shift 2
			;;
		--freq|--frequency)
			FREQ=$2
			shift 2
			;;
		--rfgain)
			RFGAIN=$2
			shift 2
			;;
		--save)
			SAVEDIR=$2
			shift 2
			;;
		--chan)
			CHAN=$2
			shift 2
			;;
		--declination|--dec|--decln)
			DECLN=$2
			shift 2
			;;
		--antenna|--ant)
			ANT=$2
			shift 2
			;;
		--thresh|--threshold)
			THRESH=$2
			shift 2;
			;;
		--longitude|--long)
			LONG=$2
			shift 2
			;;
		--temp|--tmp)
			TEMPDIR=$2
			shift 2
			;;
		--help)
			cat helptmp$$
			rm -f helptmp$$
			exit 0
			;;
		*)
			echo "Unknown argument: $1"
			rm -f helptmp$$
			exit 1
			;;
	esac
done
rm -f helptmp$$
for arg in DEVICE LONG DECLN ANT
do
	#echo PROCESSING $arg
	vv=$( eval "echo \$$arg" )
	if [ "$vv" = None ]
	then
		echo Missing required value for: $arg
		exit 1
	fi
done


while true
do
    #
    # If declinaton specifier is apparently a file...
    #
    decln=$DECLN
    if [ -e $DECLN ]
    then
		decln=`cat $2`
	fi

	#
	# Record 10 minutes worth of detector channel-bank data
	#
	# It will produce output in <prefix>/frb_tmp.dat
	# It also produces a "frb_rate.txt" file in current directory to convey the
	#  selected channel rate.  The channel-rate usually allows for 130-150usec
	#  time-domain resolution.
	#
	frb_hunter2.py --device "$DEVICE" --rfgain $RFGAIN --srate $SRATE --freq $FREQ --seconds 600 \
	  --prefix $TMPDIR/$CHAN-
	trap 'exit' 1 2 3 4 5 6 7 8 19 10 11 12 13 14 15
	#
	# Run a whack of trial-dedispersions, looking for a pulse
	#
	nzero=0
	ndisp=0
	tslist="None"
	for sd in 0.0 0.5 1 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0
	do
	    rm -f $TMPDIR/$CHAN-frb-event.json
	    CRATE=`cat frb_rate.txt`
	    cnt=`expr $CRATE '*' 2`

		frb_bulk_analyser.py --declination $decln --infile $TMPDIR/$CHAN-frb_tmp.dat --srate $CRATE \
		  --threshold $THRESH --sdelay $sd --prefix $TMPDIR/$CHAN- --seconds 600 --longitude $LONG
		if [ -e $TMPDIR/$CHAN-frb-event.json ]
		then
		    if [ $sd = 0.0 ]
		    then
		        nzero=`expr $nzero + 1`
		    else
		        ndisp=`expr $ndisp + 1`
		    fi
			ts=`date -u +%Y%m%d-%H%M%S`
		    tslist="$tslist $ts"
			count=`awk '/scount/ {print $2}' $TMPDIR/$CHAN-frb-event.json`
			offset=`expr $count - $CRATE`
			#
			# Make trimmed copies of the filter-bank data, and the dedispersed data
			#
			dd if=$TMPDIR/$CHAN-frb_tmp.dat of=$SAVE/$ts-$sd.bin bs=64 skip=$offset count=$cnt
			dd if=$TMPDIR/$CHAN-frb_dedisp.dat of=$SAVE/$ts-$sd-dedisp.bin bs=4 skip=$offset count=$cnt
			mv $TMPDIR/$CHAN-frb-event.json $SAVE/$ts-$sd.json
		fi
	done
	if [ $ndisp -le 0 ]
	then
		for f in $tslist
		do
			rm -f $SAVE/${f}*
		done
	fi
	sleep 10
done

