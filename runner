#!/bin/bash
cat >helptmp$$ <<"!EOF!"
Usage: runner --device <dev> --longitude <long> --decln <dec> --antenna <ant>
    [--srate <rate>] [--frequency <freq>] [--save <savedir>] [--chan <chname>]
    [--temp <tmpdir>] [--threshold <thresh>] [--seconds <secs>]
    [--fftrate <rate>] [--rundir dir]
!EOF!
SRATE=10e6
RFGAIN=30
CHAN=FRB0
FREQ=1420.4058e6
SAVEDIR=$HOME/ra_data
DEVICE=None
DECLN=None
LONG=None
THRESH=8.5
ANT=None
TMPDIR=$HOME
SECS=600
FFTRATE=30
RUNDIR="."
if [ $# -le 0 ]
then
	cat helptmp$$
	rm -f helptmp$$
	exit 0
fi
while [ $# -gt 0 ]
do
	case $1 in
		--device|--dev)
			DEVICE="$2"
			shift 2
			;;
		--srate)
			SRATE=$2
			shift 2
			;;
		--freq|--frequency)
			FREQ=$2
			shift 2
			;;
		--rfgain)
			RFGAIN=$2
			shift 2
			;;
		--save)
			SAVEDIR=$2
			shift 2
			;;
		--chan)
			CHAN=$2
			shift 2
			;;
		--declination|--dec|--decln)
			DECLN=$2
			shift 2
			;;
		--antenna|--ant)
			ANT=$2
			shift 2
			;;
		--thresh|--threshold)
			THRESH=$2
			shift 2;
			;;
		--longitude|--long)
			LONG=$2
			shift 2
			;;
		--temp|--tmp)
			TMPDIR=$2
			shift 2
			;;
		--seconds)
			SECS=$2
			shift 2
			;;
		--help)
			cat helptmp$$
			rm -f helptmp$$
			exit 0
			;;
	    --fftrate)
			FFTRATE=$2
			shift 2
			;;
	    --rundir)
			RUNDIR=$2
			shift 2
			;;
		*)
			echo "Unknown argument: $1"
			rm -f helptmp$$
			exit 1
			;;
	esac
done
rm -f helptmp$$
for arg in DEVICE LONG DECLN ANT
do
	#echo PROCESSING $arg
	vv=$( eval "echo \$$arg" )
	if [ "$vv" = None ]
	then
		echo Missing required value for: $arg
		exit 1
	fi
done


cd $RUNDIR
while true
do
    #
    # If declinaton specifier is apparently a file...
    #
    decln=$DECLN
    if [ -e $DECLN ]
    then
		decln=`cat $2`
	fi

	#
	# Record 10 minutes worth of detector channel-bank data
	#
	# It will produce output in <prefix>/frb_tmp.dat
	# It also produces a "frb_rate.txt" file in current directory to convey the
	#  selected channel rate.  The channel-rate usually allows for 130-150usec
	#  time-domain resolution.
	#
	frb_hunter2.py --device "$DEVICE" --rfgain $RFGAIN --srate $SRATE --freq $FREQ --seconds $SECS \
	  --prefix $TMPDIR/$CHAN- --antenna $ANT --fftrate $FFTRATE
	trap 'exit' 1 2 3 4 5 6 7 8 19 10 11 12 13 14 15
	#
	# Run a whack of trial-dedispersions, looking for a pulse
	#
	nzero=0
	ndisp=0
	tslist="None"
	jslist="None"
	copied=0
	maxsigma=0
	maxsd=-1
	minsigma=9999
	minsd=-1
	
	#
	# Delay increments for the analyser--a proxy for DM
	#
	for sd in 0.0 1.0 2.0 3.0 4.0 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 10.5 11.0 11.5 12.0 12.5 13.0 13.5 14.0
	do
	    #
	    # Remove previous temporary .json file
	    #
	    rm -f $TMPDIR/$CHAN-frb-event.json
	    
	    #
	    # Determine channel-rate and the 'cnt' that will be used in 'dd'
	    #
	    CRATE=`cat frb_rate.txt`
	    cnt=`expr $CRATE '*' 2`
	    

        #
        # Call the bulk analyser, which applies de-dispersion, and then
        #  looks for a pulse...
        #
		frb_bulk_analyser.py --declination $decln --infile $TMPDIR/$CHAN-frb_tmp.dat --srate $CRATE \
		  --threshold $THRESH --sdelay $sd --prefix $TMPDIR/$CHAN- --seconds $SECS --longitude $LONG
		  
		#
		# If there's a .json 'event' file, save some of the data
		#
		if [ -e $TMPDIR/$CHAN-frb-event.json ]
		then
		
		    #
		    # lower dispersion is a special case
		    #
		    case $sd in
				0.0|0.5|1.0|1.5|2.0|2.5|3.0|3.5)
					nzero=`expr $nzero + 1`
					;;
				*)
				ndisp=`expr $ndisp + 1`
				;;
			esac
				
		    
		    #
		    # Create a timestamp for the SAVE files
		    #
			ts=`date -u +%Y%m%d-%H%M%S`
		    tslist="$tslist $ts"
			count=`awk '/scount/ {gsub(",", "", $2); print $2}' $TMPDIR/$CHAN-frb-event.json`
			offset=`expr $count - $CRATE`
			#
			# Make trimmed copies of the filter-bank data, and the dedispersed data
			#
			#
			# We only need ONE trimmed copy of the raw filterbank file
			#
			if [ $copied = 0 ]
			then
				echo Moving $TMPDIR/$CHAN-frb.tmp.dat to $SAVEDIR/$ts-raw.bin
			    dd if=$TMPDIR/$CHAN-frb_tmp.dat of=$SAVEDIR/$ts-raw.bin bs=64 skip=$offset count=$cnt
			    rawsave=$SAVEDIR/$ts-raw.bin
			    rawts=$ts
			    copied=1
			fi
			sigma=`awk '/sigma/ {gsub(",", "", $2); printf ("%d", $2)}' $TMPDIR/$CHAN-frb-event.json`
			#
			# Take note of where the MAX sigma value is
			#
			if [ $sigma -gt $maxsigma ]
			then
				maxsigma=$sigma
				maxsd=$sd
				maxts=$ts
			fi
			if [ $sigma -lt $minsigma ]
			then
				minsigma=$sigma
				minsd=$sd
			fi
		    #
		    # Make "SAVE" copies of the dedispersed saved pulse ahd the
		    #  corresponding .json file
		    #
		    echo Moving $TMPDIR/$CHAN-frb_dedisp.dat $SAVEDIR/$ts-$sd-dedisp.bin
			dd if=$TMPDIR/$CHAN-frb_dedisp.dat of=$SAVEDIR/$ts-$sd-dedisp.bin bs=4 skip=$offset count=$cnt
			echo Moving $TMPDIR/$CHAN-frb-event.json to $SAVEDIR/$ts-$sd.json
			mv $TMPDIR/$CHAN-frb-event.json $SAVEDIR/$ts-$sd.json
		fi
	done
	sdbig=`echo $maxsd |awk '{if ($1 >= 6.5) print "True"; else print "False"}'`
	#
	# Looks like either there's no dispersed peaks, or all of them are
	#  below our "interesting" threshold
	#
	# Ditch the files
	#
	if [ $ndisp -le 0 -o $sdbig = False ]
	then
		for f in $tslist
		do
		    echo Removing $SAVEDIR/${f}*
			rm -f $SAVEDIR/${f}*
		done
	#
	# Else things are "possibly interesting"
	#
	# Create a SIGPROC FB file from the raw FB input
	#
	else
		frb_raw_to_fb.py --infile $rawsave --outfile $SAVEDIR/$rawts-raw.fb --freq $FREQ --srate $CRATE --bandwidth $SRATE \
			--decln $DECLN --json $SAVEDIR/$maxts-$maxsd.json
		process_frb_dedisp.py --infile $SAVEDIR/$maxts-$maxsd-dedisp.bin --srate $CRATE >$SAVEDIR/$maxts-$maxsd.plt
		
		#
		# Test for correlation against various curves
		#
		echo Running analyse_plt.py
		ret=`analyse_plt.py --infile $SAVEDIR/$maxts-$maxsd.plt --threshold 0.66`
		echo Analyse_plt ret $ret
		if [ $ret != "Matched" ]
		then
			for f in $tslist
			do
			    echo Second pass removing $SAVEDIR/${f}*
				rm -f $SAVEDIR/${f}*
			done
		fi	
	fi
	
	sleep 5
done

