options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: frb_hunter2
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: crate
  id: variable
  parameters:
    comment: 'This gets computed.

      Basica strategy is to find

      the largest rate <= 4000

      that prdouces an integer

      decimation.'
    value: frb_buf_mgr.compute_crate(fftsize,samp_rate,maxrate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 492.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: srate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 60.0]
    rotation: 0
    state: enabled
- name: wr_status
  id: variable
  parameters:
    comment: ''
    value: frb_buf_mgr.write_rate("frb_rate.txt", crate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 644.0]
    rotation: 0
    state: true
- name: antenna
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Antenna selector
    short_id: ''
    type: str
    value: '"RX2"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 580.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '4096'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 68.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_1
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 228.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: prefix+"frb_tmp.dat"
    type: float
    unbuffered: 'True'
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1960, 396.0]
    rotation: 0
    state: true
- name: blocks_head_0
  id: blocks_head
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: int(seconds*samp_rate)
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 228.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int((samp_rate/4096)/fftrate)
    type: complex
    vlen: '4096'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 84.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_1
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/fftsize/crate)
    type: float
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1848, 212.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '4096'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 140.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_1
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fftsize
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 244.0]
    rotation: 0
    state: true
- name: device
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Input device
    short_id: ''
    type: str
    value: '"airspy,linearity=1"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 468.0]
    rotation: 0
    state: true
- name: fft_logger_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nimport math\nfrom gnuradio.fft import\
      \ window\nimport os\nimport signal\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"FFT loggert\"\
      \"\"\n\n    def __init__(self, fftsize=4096, logfile=\"fft_log.out\"):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='FFT Logger',   # will show up in GRC\n            in_sig=[(np.float32,fftsize)],\n\
      \            out_sig=None\n        )\n        # if an attribute with the same\
      \ name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.fftsize = fftsize\n        self.logfile = logfile\n\
      \        self.lasttime = time.time()\n        self.fftbuf = np.zeros(self.fftsize,\
      \ dtype=np.float32)\n        self.fftcnt = 0\n        self.winpower = sum([x*x\
      \ for x in window.blackmanharris(self.fftsize)])\n        self.scale = 20*math.log10(self.fftsize)\
      \ - 10*math.log10(self.winpower/self.fftsize)\n        self.set_output_multiple(3)\n\
      \        self.killctr = 0\n        \n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Log output of FFTT\"\"\"\n        #\n        # We keep the FFT\
      \ power data in the linear domain until\n        #  just before we log it.\n\
      \        #\n        #\n        # Average-in all the input FFT buffers we've\
      \ been handed\n        #\n        # We are called at an average rate of 10-20Hz,\
      \ and with logging\n        #   every two minutes, that's over 1000 samples\
      \ in the averaging\n        #   buffer.\n        #\n        now = time.time()\n\
      \        for x in input_items[0]:\n            self.fftbuf = np.add(self.fftbuf,\
      \ x)\n            self.fftcnt += 1\n            \n        self.killctr += 1\n\
      \        if (self.killctr >= 10):\n            if (os.path.exists(\"stop.txt\"\
      )):\n                os.kill(os.getpid(), signal.SIGTERM)\n            self.killctr\
      \ = 0\n            \n        #\n        # If time to log, compute the average,\
      \ then convert to\n        #    10Log10 and apply scaling\n        #\n     \
      \   if ((now - self.lasttime) > 120):\n            self.lasttime = now\n   \
      \         fp = open(self.logfile, \"w\")\n            \n            #\n    \
      \        # Provides protection against (unlikely)\n            #  self.fftbuf\
      \ being 0 after all those adds.\n            #\n            self.fftbuf = np.add(self.fftbuf,\
      \ 1.0e-14)\n            \n            \n            #\n            # Compute\
      \ (linear) average\n            #\n            self.fftbuf = np.divide(self.fftbuf,self.fftcnt)\n\
      \            \n            #\n            # Convert to 10log10\n           \
      \ #\n            self.fftbuf = np.log10(self.fftbuf)\n            self.fftbuf\
      \ = np.multiply(self.fftbuf,10.0)\n            \n            #\n           \
      \ # Subtract-out the scale factor\n            #\n            self.fftbuf =\
      \ np.subtract(self.fftbuf, self.scale)\n            \n            for i in range(0,self.fftsize):\n\
      \                fp.write(\"%.3f\" % self.fftbuf[i])\n                if (i\
      \ < self.fftsize-1):\n                    fp.write(\",\")\n            fp.write(\"\
      \\n\")\n            self.fftcnt = 0\n            self.fftbuf = np.zeros(self.fftsize,dtype=np.float32)\n\
      \            fp.close()\n            \n            \n            \n        return\
      \ len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    fftsize: '4096'
    logfile: prefix+logfile
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('FFT Logger', 'blk', [('fftsize', '4096'), ('logfile', "'fft_log.out'")],
      [('0', 'float', 4096)], [], 'FFT loggert', ['fftsize', 'logfile'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1824, 52.0]
    rotation: 0
    state: true
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fftsize
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fftsize)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 196.0]
    rotation: 0
    state: true
- name: fft_vxx_1
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: '4096'
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(4096)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1168, 44.0]
    rotation: 0
    state: true
- name: fftrate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Rate of monitor FFT
    short_id: ''
    type: intx
    value: '15'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 692.0]
    rotation: 0
    state: true
- name: fftsize
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: FFT size
    short_id: ''
    type: intx
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 476.0]
    rotation: 0
    state: true
- name: frb_buf_mgr
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\nimport\
      \ os\nimport ephem\nimport time\nimport numpy as np\nimport shutil\nimport glob\n\
      import copy\nimport shutil\nimport json\nimport math\n\nmovelist = []\n\ndef\
      \ getalpha(corner, srate):\n\tq = math.pow(math.e,-2.0*(corner/srate))\n\talpha\
      \ = 1.0 - q\n\treturn alpha\n\n\ndef write_rate(fn, rate):\n    fp = open(fn,\
      \ \"w\")\n    fp.write(\"%d\\n\" % rate)\n    fp.close()\n    return True\n\n\
      \ndef compute_crate(fftsize,srate,maxrate):\n    rates = [x for x in range(maxrate,2500,-5)]\n\
      \    for r in rates:\n        d = float(srate)/float(fftsize)\n        d /=\
      \ float(r)\n        \n        if (d == float(int(d))):\n            return r\n\
      \    return 2500\n\n    \n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1784, 516.0]
    rotation: 0
    state: enabled
- name: freq
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Frequency
    short_id: ''
    type: eng_float
    value: 1420.4058e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 476.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 60.0]
    rotation: 0
    state: true
- name: import_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import os
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 60.0]
    rotation: 0
    state: true
- name: logfile
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Logfile name
    short_id: ''
    type: str
    value: '"fft_log.out"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 580.0]
    rotation: 0
    state: true
- name: maxrate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Maximum output sample rate
    short_id: ''
    type: intx
    value: int(4e3)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 372.0]
    rotation: 0
    state: true
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: antenna
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: device
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: 0.8*samp_rate
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: refsource
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '2'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: freq
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: rfgain
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '2'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: none
    time_source0: timesource
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 140.0]
    rotation: 0
    state: true
- name: prefix
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: File prefix for temporary event files
    short_id: ''
    type: str
    value: '"/run/user/%d" % (os.getuid()) + "/"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 476.0]
    rotation: 0
    state: true
- name: refsource
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Reference SOurce
    short_id: ''
    type: str
    value: '"internal"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 580.0]
    rotation: 0
    state: true
- name: rfgain
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RF Gain
    short_id: ''
    type: eng_float
    value: '40'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 476.0]
    rotation: 0
    state: true
- name: seconds
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Runtime seconds
    short_id: ''
    type: intx
    value: '600'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 580.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_1
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: frb_buf_mgr.getalpha(crate,(samp_rate/fftsize))
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1608, 212.0]
    rotation: 0
    state: true
- name: srate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sample Rate
    short_id: ''
    type: eng_float
    value: 20e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 468.0]
    rotation: 0
    state: true
- name: time_catcher
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\"\"\"\nEmbedded Python\
      \ Blocks:\n\nEach time this file is saved, GRC will instantiate the first class\
      \ it finds\nto get ports and parameters of your block. The arguments to __init__\
      \  will\nbe the parameters. All of them are required to have default values!\n\
      \"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\nimport time\nimport math\n\
      from gnuradio.fft import window\nimport os\nimport signal\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Time Catcher\"\"\"\n\n    def __init__(self, fftsize=32,tsfile=\"tsfile.txt\"\
      ):  # only default arguments here\n        \"\"\"arguments to this function\
      \ show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n    \
      \        self,\n            name='Time Catcher',   # will show up in GRC\n \
      \           in_sig=[(np.float32,fftsize)],\n            out_sig=None\n     \
      \   )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.fftsize\
      \ = fftsize\n        self.tsfile = tsfile\n        self.first = True\n     \
      \   \n\n    def work(self, input_items, output_items):\n        \"\"\"Capture\
      \ timestamp on first record\"\"\"\n        if (self.first == True):\n      \
      \      fp = open(self.tsfile, \"w\")\n            fp.write(\"%13.6f\\n\" % time.time())\n\
      \            fp.close()\n            self.first = False\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    fftsize: '32'
    maxoutbuf: '0'
    minoutbuf: '0'
    tsfile: '''tsfile.txt'''
  states:
    _io_cache: ('Time Catcher', 'blk', [('fftsize', '32'), ('tsfile', "'tsfile.txt'")],
      [('0', 'float', 32)], [], 'Time Catcher', ['fftsize', 'tsfile'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1968, 524.0]
    rotation: 0
    state: true
- name: timesource
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: PPS Source
    short_id: ''
    type: str
    value: '"internal"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 684.0]
    rotation: 0
    state: true
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: integ_fft
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2080, 212.0]
    rotation: 0
    state: true
- name: virtual_source_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: integ_fft
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1752, 420.0]
    rotation: 0
    state: true

connections:
- [blocks_complex_to_mag_squared_0, '0', fft_logger_1, '0']
- [blocks_complex_to_mag_squared_1, '0', single_pole_iir_filter_xx_1, '0']
- [blocks_head_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_head_0, '0', blocks_stream_to_vector_1, '0']
- [blocks_keep_one_in_n_0, '0', fft_vxx_1, '0']
- [blocks_keep_one_in_n_1, '0', virtual_sink_0, '0']
- [blocks_stream_to_vector_0, '0', blocks_keep_one_in_n_0, '0']
- [blocks_stream_to_vector_1, '0', fft_vxx_0, '0']
- [fft_vxx_0, '0', blocks_complex_to_mag_squared_1, '0']
- [fft_vxx_1, '0', blocks_complex_to_mag_squared_0, '0']
- [osmosdr_source_0, '0', blocks_head_0, '0']
- [single_pole_iir_filter_xx_1, '0', blocks_keep_one_in_n_1, '0']
- [virtual_source_0_0, '0', blocks_file_sink_0, '0']
- [virtual_source_0_0, '0', time_catcher, '0']

metadata:
  file_format: 1
